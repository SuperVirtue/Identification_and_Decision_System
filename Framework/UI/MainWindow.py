# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QDir, pyqtSignal
from PyQt5.QtGui import QPixmap, QMovie
from PyQt5.QtWidgets import QTableWidgetItem, QAbstractItemView, QFileDialog
import xlwt

from . import py2neo4j


class MyQLabel(QtWidgets.QLabel):
    # 自定义信号, 注意信号必须为类属性
    button_clicked_signal = QtCore.pyqtSignal()
    mouseDoubleClickSignal = pyqtSignal(object)

    def __init__(self, parent=None):
        super(MyQLabel, self).__init__(parent)

    def mouseReleaseEvent(self, QMouseEvent):
        self.button_clicked_signal.emit()

    # 可在外部与槽函数连接
    def connect_customized_slot(self, func):
        self.button_clicked_signal.connect(func)

    def mouseDoubleClickEvent(self, e):
        self.mouseDoubleClickSignal.emit(self)


class Ui_MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.upload_picture_button.clicked.connect(self.clickUploadPictureButton)
        self.instance_button.clicked.connect(self.clickInstanceButton)
        self.defect_detection_button.clicked.connect(self.clickDefectDetectionButton)
        self.query_kg_button.clicked.connect(self.clickQueryKGButton)
        self.save_form_button.clicked.connect(self.clickSaveFormButton)
        self.label_original_pic.mouseDoubleClickSignal.connect(self.clickOriginalLable)
        self.label_instance_pic.mouseDoubleClickSignal.connect(self.clickInstanceLable)
        self.label_defect_pic.mouseDoubleClickSignal.connect(self.clickDefectLable)
        self.select_picture_file_path = ""
        self.out_defect_img_path = ""
        self.out_instance_img_path = ""

    def clickOriginalLable(self):
        if self.select_picture_file_path!="":
            if os.path.exists(self.select_picture_file_path):
                self.showImage(self.select_picture_file_path)

    def clickInstanceLable(self):
        if self.out_instance_img_path!="":
            if os.path.exists(self.out_instance_img_path):
                self.showImage(self.out_instance_img_path)

    def clickDefectLable(self):
        if self.out_defect_img_path!="":
            if os.path.exists(self.out_defect_img_path):
                self.showImage(self.out_defect_img_path)

    def img_resize(self, img, scale=0.4, interpolation=cv2.INTER_LINEAR):
        img = cv2.resize(img, (int(img.shape[1] * scale), int(img.shape[0] * scale)), interpolation=interpolation)
        return img

    def showImage(self,filePath):
        img = cv2.imread(filePath)
        img_new = self.img_resize(img, interpolation=cv2.INTER_AREA)
        cv2.imshow("image", img_new)
        cv2.waitKey(0)

    def clickUploadPictureButton(self):
        directory = QtWidgets.QFileDialog.getOpenFileName(self, "选取图片文件", "D:/Software/pycharm/datasets/Instance/coco/test2017/PNGtype", "PNG Files(*.png)")
        self.select_picture_file_path = directory[0]
        pix = QPixmap(self.select_picture_file_path).scaled(self.label_original_pic.width(), self.label_original_pic.height())
        self.label_original_pic.setPixmap(pix)


    def clickInstanceButton(self):
        str_list = self.select_picture_file_path.split("/")
        str_list_ = str_list[len(str_list) - 1].split(".")
        self.out_instance_img_path = "D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/output/" + str_list_[0] + "_instance.png"
        command = "python D:/Software/pycharm/test/BlendMaskAndYolov7/AdelaiDet-master/demo/demo.py --config-file D:/Software/pycharm/test/BlendMaskAndYolov7/AdelaiDet-master/configs/BlendMask/Base-BlendMask.yaml --input "+self.select_picture_file_path+" --output "+self.out_instance_img_path+" --confidence-threshold 0.35 --opts MODEL.WEIGHTS D:/Software/pycharm/test/BlendMaskAndYolov7/AdelaiDet-master/training_dir/blendmask_R_50_1x_first/model_final.pth"
        print(command)
        os.system(command)
        if os.path.exists(self.out_instance_img_path):
            pix = QPixmap(self.out_instance_img_path).scaled(self.label_instance_pic.width(),
                                                                self.label_instance_pic.height())
            self.label_instance_pic.setPixmap(pix)
        data_file = "D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/output/data1.txt"
        if os.path.exists(data_file):
            f = open(data_file)
            data = f.readlines()
            self.label_proportion_defect.setText("缺陷占比："+data[0])

    def clickDefectDetectionButton(self):
        str_list = self.select_picture_file_path.split("/")
        self.out_defect_img_path = "D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/output/" + str_list[len(str_list) - 1]
        command = "python D:/Software/pycharm/test/BlendMaskAndYolov7/yolov7-main/detect.py --weights D:/Software/pycharm/test/BlendMaskAndYolov7/yolov7-main/runs/train/exp27_Insulator_300/weights/best.pt  --conf 0.25 --img-size 640 --source  "+self.select_picture_file_path+" --save_img_path D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/output"
        os.system(command)
        if os.path.exists(self.out_defect_img_path):
            pix = QPixmap(self.out_defect_img_path).scaled(self.label_defect_pic.width(),
                                               self.label_defect_pic.height())
            self.label_defect_pic.setPixmap(pix)
        data_file = "D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/output/data2.txt"
        if os.path.exists(data_file):
            f = open(data_file, encoding="utf-8")
            data = f.readlines()
            out_str_defect_and_number = "缺陷类型:" + data[0]+" 缺陷个数:" + data[1]
            out_str_defect_and_number = out_str_defect_and_number.replace("\n","")
            self.label_defect_and_number.setText(out_str_defect_and_number)

    def clearList(self, list):
        re_list = []
        for i in list:
            if i == '':
                continue
            if '\n' in i:
                str_ = i.replace('\n','')
                re_list.append(str_)
            else:
                re_list.append(i)
        return re_list


    def clickQueryKGButton(self):
        self.table_kg.setColumnCount(4)
        self.table_kg.setRowCount(20)
        self.table_kg.setEditTriggers(QAbstractItemView.DoubleClicked)
        self.table_kg.setHorizontalHeaderItem(0, QTableWidgetItem('故障名称'))
        self.table_kg.setHorizontalHeaderItem(1, QTableWidgetItem('故障描述'))
        self.table_kg.setHorizontalHeaderItem(2, QTableWidgetItem('应对措施'))
        self.table_kg.setHorizontalHeaderItem(3, QTableWidgetItem('故障原因'))

        str_ori_defect = self.label_defect_and_number.text()
        str_list_1 = str_ori_defect.split(":")
        str_list_2 = str_list_1[1].split(" ")
        str_list_2.pop()
        str_list_2.pop()
        print(str_list_2)
        str_list_3 = ['局部开裂' if i == '破损' else i for i in str_list_2]
        str_list_4 = ['污秽闪络' if i == '闪络' else i for i in str_list_3]
        #str_list_4 = ['断串' if i == '闪络' else i for i in str_list_3]
        all_str = []
        for one in str_list_4:
            str = py2neo4j.getSolution(one)
            str = str + "||" + one
            all_str.append(str)
        print(len(all_str))
        start_row=0
        for i in range(len(all_str)):
            all_split_1 = all_str[i].split("||")
            title_list = all_split_1[1]
            all_split_2 = all_split_1[0].split("应对措施：")
            all_split_3 = all_split_2[0].split("故障描述：")
            describe_list = all_split_3[1].split("\n\t")
            all_split_4 = all_split_2[1].split("故障原因：")
            measures_list = all_split_4[0].split("\n\t")
            reason_list = all_split_4[1].split("\n\t")
            describe_list = self.clearList(describe_list)
            measures_list = self.clearList(measures_list)
            reason_list = self.clearList(reason_list)
            print(describe_list, measures_list, reason_list)
            self.table_kg.setItem(start_row, 0, QTableWidgetItem(title_list))
            for i in range(len(describe_list)):
                self.table_kg.setItem(start_row+i, 1, QTableWidgetItem(describe_list[i]))
            for i in range(len(measures_list)):
                self.table_kg.setItem(start_row+i, 2, QTableWidgetItem(measures_list[i]))
            for i in range(len(reason_list)):
                self.table_kg.setItem(start_row+i, 3, QTableWidgetItem(reason_list[i]))
            start_row = start_row + max(len(title_list),len(measures_list),len(describe_list),len(reason_list))
        self.table_kg.resizeColumnsToContents()


    def clickSaveFormButton(self):
        fileName = QFileDialog.getSaveFileName(self,'选择保存路径', 'D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/output', '.xls(*.xls)')
        if '' not in fileName:
            filepath = fileName[0]
            wb = xlwt.Workbook()
            ws = wb.add_sheet('应对措施')
            row = self.table_kg.rowCount()
            column = self.table_kg.columnCount()
            ws.write(0, 0, '故障名称')
            ws.write(0, 1, '故障描述')
            ws.write(0, 2, '应对措施')
            ws.write(0, 3, '故障原因')
            for i in range(row):
                for j in range(column):
                    if not self.table_kg.item(i, j) == None and not self.table_kg.item(i, j).text() == "":
                        ws.write(i + 1, j, self.table_kg.item(i, j).text())
                    else:
                        ws.write(i + 1, j, ' ')
            wb.save(filepath)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(970, 773)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.upload_picture_button = QtWidgets.QPushButton(self.centralwidget)
        self.upload_picture_button.setObjectName("upload_picture_button")
        self.horizontalLayout_3.addWidget(self.upload_picture_button)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.label_original_pic = MyQLabel(self.centralwidget)
        self.label_original_pic.setAlignment(QtCore.Qt.AlignCenter)
        self.label_original_pic.setObjectName("label_original_pic")
        self.verticalLayout_2.addWidget(self.label_original_pic)
        self.verticalLayout_2.setStretch(0, 2)
        self.verticalLayout_2.setStretch(1, 5)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem2)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.instance_button = QtWidgets.QPushButton(self.centralwidget)
        self.instance_button.setObjectName("instance_button")
        self.horizontalLayout_4.addWidget(self.instance_button)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.label_instance_pic = MyQLabel(self.centralwidget)
        self.label_instance_pic.setAlignment(QtCore.Qt.AlignCenter)
        self.label_instance_pic.setObjectName("label_instance_pic")
        self.verticalLayout_4.addWidget(self.label_instance_pic)
        self.verticalLayout_4.setStretch(0, 2)
        self.verticalLayout_4.setStretch(1, 5)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem5)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem6)
        self.defect_detection_button = QtWidgets.QPushButton(self.centralwidget)
        self.defect_detection_button.setObjectName("defect_detection_button")
        self.horizontalLayout_5.addWidget(self.defect_detection_button)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem7)
        self.verticalLayout_6.addLayout(self.horizontalLayout_5)
        self.label_defect_pic = MyQLabel(self.centralwidget)
        self.label_defect_pic.setAlignment(QtCore.Qt.AlignCenter)
        self.label_defect_pic.setObjectName("label_defect_pic")
        self.verticalLayout_6.addWidget(self.label_defect_pic)
        self.verticalLayout_6.setStretch(0, 2)
        self.verticalLayout_6.setStretch(1, 5)
        self.horizontalLayout.addLayout(self.verticalLayout_6)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_remain = QtWidgets.QLabel(self.centralwidget)
        self.label_remain.setAlignment(Qt.AlignCenter)
        self.label_remain.setText("")
        self.label_remain.setObjectName("label_remain")
        # self.movie = QMovie('D:/Software/pycharm/test/BlendMaskAndYolov7/Framework/loading/rcc.jfif')
        # self.movie.setScaledSize(self.label_remain.size())
        # self.label_remain.setMovie(self.movie)
        # self.movie.start()
        # op = QtWidgets.QGraphicsOpacityEffect()
        # op.setOpacity(0)
        # self.label_remain.setGraphicsEffect(op)
        self.horizontalLayout_7.addWidget(self.label_remain)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_7.addItem(spacerItem8)
        self.label_proportion_defect = QtWidgets.QLabel(self.centralwidget)
        self.label_proportion_defect.setObjectName("label_proportion_defect")
        self.horizontalLayout_7.addWidget(self.label_proportion_defect)
        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_7.addItem(spacerItem9)
        self.label_defect_and_number = QtWidgets.QLabel(self.centralwidget)
        self.label_defect_and_number.setObjectName("label_defect_and_number")
        self.horizontalLayout_7.addWidget(self.label_defect_and_number)
        self.horizontalLayout_7.setStretch(0, 7)
        self.horizontalLayout_7.setStretch(1, 1)
        self.horizontalLayout_7.setStretch(2, 7)
        self.horizontalLayout_7.setStretch(3, 1)
        self.horizontalLayout_7.setStretch(4, 7)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.query_kg_button = QtWidgets.QPushButton(self.centralwidget)
        self.query_kg_button.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.query_kg_button.setObjectName("query_kg_button")
        self.horizontalLayout_2.addWidget(self.query_kg_button)
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_2.addItem(spacerItem11)
        self.table_kg = QtWidgets.QTableWidget(self.centralwidget)
        self.table_kg.setObjectName("table_kg")
        self.table_kg.setColumnCount(0)
        self.table_kg.setRowCount(0)
        self.table_kg.horizontalScrollBar().setStyleSheet("QScrollBar{background-color:rgb(218,222,223); height:10px;}"
		"QScrollBar::handle{background-color:rgb(180, 180, 180); border:2px solid transparent; border-radius:5px;}"
		"QScrollBar::handle:hover{background-color:rgb(139, 139, 139);}"
		"QScrollBar::sub-line{background:transparent;}"
		"QScrollBar::add-line{background:transparent;}")
        self.horizontalLayout_2.addWidget(self.table_kg)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_2.addItem(spacerItem12)
        self.save_form_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_form_button.setObjectName("save_form_button")
        self.horizontalLayout_2.addWidget(self.save_form_button)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem13)
        self.horizontalLayout_2.setStretch(1, 2)
        self.horizontalLayout_2.setStretch(3, 20)
        self.horizontalLayout_2.setStretch(4, 1)
        self.horizontalLayout_2.setStretch(5, 2)
        self.horizontalLayout_2.setStretch(6, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout.setStretch(0, 6)
        self.verticalLayout.setStretch(2, 6)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.upload_picture_button.setText(_translate("MainWindow", "上传图片"))
        self.label_original_pic.setText(_translate("MainWindow", "显示实例分割图"))
        self.instance_button.setText(_translate("MainWindow", "进行实例分割"))
        self.label_instance_pic.setText(_translate("MainWindow", "显示实例分割图"))
        self.defect_detection_button.setText(_translate("MainWindow", "进行缺陷检测"))
        self.label_defect_pic.setText(_translate("MainWindow", "显示目标检测图"))
        self.label_proportion_defect.setText(_translate("MainWindow", "缺陷占比："))
        self.label_defect_and_number.setText(_translate("MainWindow", "缺陷类型：  缺陷个数："))
        self.query_kg_button.setText(_translate("MainWindow", "查询知识图谱"))
        self.save_form_button.setText(_translate("MainWindow", "保存表格"))
